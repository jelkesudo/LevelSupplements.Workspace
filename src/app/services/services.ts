//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    authPOST(body: AuthRequest | undefined): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponse>;
        }));
    }

    protected processAuthPOST(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthResponse>(null as any);
    }

    /**
     * @return OK
     */
    authDELETE(): Observable<void> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAuthDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @param sortBy (optional) 
     * @param sortDirection (optional) 
     * @param perPage (optional) 
     * @param page (optional) 
     * @return OK
     */
    products(name: string | undefined, sortBy: string | undefined, sortDirection: string | undefined, perPage: number | undefined, page: number | undefined): Observable<ProductListDtoPagedResponse> {
        let url_ = this.baseUrl + "/api/products?";
        if (name === null)
            throw new globalThis.Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (sortBy === null)
            throw new globalThis.Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new globalThis.Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (perPage === null)
            throw new globalThis.Error("The parameter 'perPage' cannot be null.");
        else if (perPage !== undefined)
            url_ += "PerPage=" + encodeURIComponent("" + perPage) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProducts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductListDtoPagedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductListDtoPagedResponse>;
        }));
    }

    protected processProducts(response: HttpResponseBase): Observable<ProductListDtoPagedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductListDtoPagedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductListDtoPagedResponse>(null as any);
    }

    /**
     * @return OK
     */
    products2(id: string): Observable<ProductReadDto> {
        let url_ = this.baseUrl + "/api/products/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProducts2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProducts2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductReadDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductReadDto>;
        }));
    }

    protected processProducts2(response: HttpResponseBase): Observable<ProductReadDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductReadDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Not Found", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductReadDto>(null as any);
    }

    /**
     * @param name (optional) 
     * @param sortBy (optional) 
     * @param sortDirection (optional) 
     * @param perPage (optional) 
     * @param page (optional) 
     * @return OK
     */
    packs(name: string | undefined, sortBy: string | undefined, sortDirection: string | undefined, perPage: number | undefined, page: number | undefined): Observable<PackOptionDTOPagedResponse> {
        let url_ = this.baseUrl + "/api/packs?";
        if (name === null)
            throw new globalThis.Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (sortBy === null)
            throw new globalThis.Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new globalThis.Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (perPage === null)
            throw new globalThis.Error("The parameter 'perPage' cannot be null.");
        else if (perPage !== undefined)
            url_ += "PerPage=" + encodeURIComponent("" + perPage) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPacks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPacks(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PackOptionDTOPagedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PackOptionDTOPagedResponse>;
        }));
    }

    protected processPacks(response: HttpResponseBase): Observable<PackOptionDTOPagedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PackOptionDTOPagedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PackOptionDTOPagedResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    users(body: CreateUserDTO | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUsers(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class AuthRequest implements IAuthRequest {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuthRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuthRequest {
    email?: string | undefined;
    password?: string | undefined;
}

export class AuthResponse implements IAuthResponse {
    token?: string | undefined;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IAuthResponse {
    token?: string | undefined;
}

export class CreateUserDTO implements ICreateUserDTO {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    roleId?: string;

    constructor(data?: ICreateUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.roleId = _data["roleId"];
        }
    }

    static fromJS(data: any): CreateUserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["roleId"] = this.roleId;
        return data;
    }
}

export interface ICreateUserDTO {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    roleId?: string;
}

export class FlavorDto implements IFlavorDto {
    id?: string;
    name?: string | undefined;
    color?: string | undefined;

    constructor(data?: IFlavorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): FlavorDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlavorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }
}

export interface IFlavorDto {
    id?: string;
    name?: string | undefined;
    color?: string | undefined;
}

export class PackDto implements IPackDto {
    id?: string;
    size?: number;
    unit?: string | undefined;

    constructor(data?: IPackDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.size = _data["size"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): PackDto {
        data = typeof data === 'object' ? data : {};
        let result = new PackDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["size"] = this.size;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IPackDto {
    id?: string;
    size?: number;
    unit?: string | undefined;
}

export class PackOptionDTO implements IPackOptionDTO {
    id?: string;
    label?: string | undefined;

    constructor(data?: IPackOptionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
        }
    }

    static fromJS(data: any): PackOptionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PackOptionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        return data;
    }
}

export interface IPackOptionDTO {
    id?: string;
    label?: string | undefined;
}

export class PackOptionDTOPagedResponse implements IPackOptionDTOPagedResponse {
    totalCount?: number;
    currentPage?: number;
    itemsPerPage?: number;
    readonly pagesCount?: number;
    data?: PackOptionDTO[] | undefined;

    constructor(data?: IPackOptionDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.currentPage = _data["currentPage"];
            this.itemsPerPage = _data["itemsPerPage"];
            (this as any).pagesCount = _data["pagesCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PackOptionDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PackOptionDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PackOptionDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["currentPage"] = this.currentPage;
        data["itemsPerPage"] = this.itemsPerPage;
        data["pagesCount"] = this.pagesCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPackOptionDTOPagedResponse {
    totalCount?: number;
    currentPage?: number;
    itemsPerPage?: number;
    pagesCount?: number;
    data?: PackOptionDTO[] | undefined;
}

export class PriceDto implements IPriceDto {
    id?: string;
    price?: number;
    validFrom?: Date;
    validTo?: Date | undefined;

    constructor(data?: IPriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.price = _data["price"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : undefined as any;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): PriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : undefined as any;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : undefined as any;
        return data;
    }
}

export interface IPriceDto {
    id?: string;
    price?: number;
    validFrom?: Date;
    validTo?: Date | undefined;
}

export class ProductListDto implements IProductListDto {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isActive?: boolean;
    packs?: PackDto[] | undefined;
    flavors?: FlavorDto[] | undefined;

    constructor(data?: IProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["packs"])) {
                this.packs = [] as any;
                for (let item of _data["packs"])
                    this.packs!.push(PackDto.fromJS(item));
            }
            if (Array.isArray(_data["flavors"])) {
                this.flavors = [] as any;
                for (let item of _data["flavors"])
                    this.flavors!.push(FlavorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.packs)) {
            data["packs"] = [];
            for (let item of this.packs)
                data["packs"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flavors)) {
            data["flavors"] = [];
            for (let item of this.flavors)
                data["flavors"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IProductListDto {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isActive?: boolean;
    packs?: PackDto[] | undefined;
    flavors?: FlavorDto[] | undefined;
}

export class ProductListDtoPagedResponse implements IProductListDtoPagedResponse {
    totalCount?: number;
    currentPage?: number;
    itemsPerPage?: number;
    readonly pagesCount?: number;
    data?: ProductListDto[] | undefined;

    constructor(data?: IProductListDtoPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            this.currentPage = _data["currentPage"];
            this.itemsPerPage = _data["itemsPerPage"];
            (this as any).pagesCount = _data["pagesCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ProductListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductListDtoPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListDtoPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        data["currentPage"] = this.currentPage;
        data["itemsPerPage"] = this.itemsPerPage;
        data["pagesCount"] = this.pagesCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IProductListDtoPagedResponse {
    totalCount?: number;
    currentPage?: number;
    itemsPerPage?: number;
    pagesCount?: number;
    data?: ProductListDto[] | undefined;
}

export class ProductReadDto implements IProductReadDto {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isActive?: boolean;
    variants?: ProductVariantDto[] | undefined;

    constructor(data?: IProductReadDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["variants"])) {
                this.variants = [] as any;
                for (let item of _data["variants"])
                    this.variants!.push(ProductVariantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductReadDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductReadDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.variants)) {
            data["variants"] = [];
            for (let item of this.variants)
                data["variants"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IProductReadDto {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    isActive?: boolean;
    variants?: ProductVariantDto[] | undefined;
}

export class ProductVariantDto implements IProductVariantDto {
    id?: string;
    sku?: string | undefined;
    quantityInStock?: number;
    pack?: PackDto;
    flavor?: FlavorDto;
    prices?: PriceDto[] | undefined;

    constructor(data?: IProductVariantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sku = _data["sku"];
            this.quantityInStock = _data["quantityInStock"];
            this.pack = _data["pack"] ? PackDto.fromJS(_data["pack"]) : undefined as any;
            this.flavor = _data["flavor"] ? FlavorDto.fromJS(_data["flavor"]) : undefined as any;
            if (Array.isArray(_data["prices"])) {
                this.prices = [] as any;
                for (let item of _data["prices"])
                    this.prices!.push(PriceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductVariantDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductVariantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sku"] = this.sku;
        data["quantityInStock"] = this.quantityInStock;
        data["pack"] = this.pack ? this.pack.toJSON() : undefined as any;
        data["flavor"] = this.flavor ? this.flavor.toJSON() : undefined as any;
        if (Array.isArray(this.prices)) {
            data["prices"] = [];
            for (let item of this.prices)
                data["prices"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IProductVariantDto {
    id?: string;
    sku?: string | undefined;
    quantityInStock?: number;
    pack?: PackDto;
    flavor?: FlavorDto;
    prices?: PriceDto[] | undefined;
}

export class ApiException extends Error {
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}